# Packaging
# quarkus.package.type=fast-jar
quarkus.http.test-port=0
quarkus.devservices.enabled=true
quarkus.swagger-ui.always-include=true
quarkus.console.enabled=true

# Listen on all interfaces. Useful when you need local container to reach this server
quarkus.http.host=0.0.0.0

# # profile to pack this example into a container, to use it execute activate the maven container profile, -Dcontainer
# %container.quarkus.container-image.build=true
# %container.quarkus.container-image.push=true
# %container.quarkus.container-image.group=${USER}
# %decontainer.quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000
# %container.quarkus.container-image.tag=1.0-SNAPSHOT
# # %container.quarkus.jib.jvm-entrypoint=/home/kogito/kogito-app-launch.sh
# # %container.quarkus.jib.base-jvm-image=quay.io/kiegroup/kogito-runtime-jvm:1.36
# # %container.quarkuss.jib.working-directory=/home/kogito/bin
# %container.quarkus.openshift.build-strategy=docker
# %container.quarkus.container-image.builder=openshift
# %container.quarkus.openshift.base-jvm-image=quay.io/kiegroup/kogito-runtime-jvm:1.36


# Messages from Workflows
#mp.messaging.outgoing.messages.connector=smallrye-kafka
# mp.messaging.outgoing.messages.url=${K_SINK:http://localhost:34015}
# I defined a port so it will be easilly exported
#quarkus.kafka.devservices.port=34015


quarkus.container-image.build=false
quarkus.container-image.push=false
quarkus.knative.name=ocpob-swf
quarkus.kubernetes.deployment-target=knative
quarkus.openshift.deploy=false
quarkus.container-image.group=ocpob-swf
quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000
# kogitoquarkus.container-image.tag=0.0.2
#quarkus.container-image.builder=openshift
#quarkus.openshift.build-strategy=docker

quarkus.log.category."org.apache.http".level=DEBUG

# Auth
# all rest client configs go as ENV vars (using .env for devmode at the root of your project or in a the target container)
quarkus.rest-client.jira_yml.url=https://rgolan.atlassian.net:443
quarkus.openapi-generator.jira_yml.auth.basicAuth.username=royg21@gmail.com
quarkus.openapi-generator.jira_yml.auth.basicAuth.password="use env var"
quarkus.rest-client.kube_yaml.url=https://kubernetes:37153
quarkus.openapi-generator.kube_yaml.auth.BearerToken.bearer-token="use env var"

#quarkus.tls.trust-all=true


#quarkus.http.auth.permission.permit1.paths=/public/*
#quarkus.http.auth.permission.permit1.policy=permit
#quarkus.http.auth.permission.permit1.methods=GET


#quarkus.http.auth.permission.deny1.paths=/MTAAnalysis,/hello
#quarkus.http.auth.permission.deny1.policy=authenticated
#quarkus.http.auth.permission.deny1.policy=permit

#quarkus.http.auth.permission.roles1.paths=/roles-secured/*,/other/*,/api/*
#quarkus.http.auth.permission.roles1.policy=role-policy1

# standalone keycloak instance. comment out to work with devmode instance
#quarkus.oidc.auth-server-url=http://localhost:44813/realms/quarkus

#quarkus.oidc.client-id=backend-service
#quarkus.oidc.credentials.secret=secret
# Tell Dev Services for Keycloak to import the realm file
# This property is not effective when running the application in JVM or Native modes
#quarkus.keycloak.devservices.realm-path=quarkus-realm.json
